{"version":3,"sources":["../../src/dbViewsToModel/index.js"],"names":["require","Model","Knex","fs","path","Mustache","pluralize","module","exports","dbName","dbConnection","knexInstance","outputModelFile","DB","knex","client","connection","database","on","console","log","i","sql","data","replace","bindings","KeyColumnUsage","ColumnModel","constrain","relation","BelongsToOneRelation","modelClass","filter","query","where","whereNotNull","join","from","to","ViewModel","columns","HasManyRelation","dataTypes","type","searchFilter","word","singularize","words","toLowerCase","split","map","singular","w","capitalize","charAt","toUpperCase","slice","camelCase","g","templateModelHeader","readFileSync","__dirname","templateModel","models","render","dbFile","views","eager","classModelNames","classes","forEach","modelName","view","TABLE_NAME","constrains","requireds","searches","tableName","properties","column","push","IS_NULLABLE","COLUMN_DEFAULT","COLUMN_NAME","DATA_TYPE","name","relations","targetTableName","REFERENCED_TABLE_NAME","targetModel","targetColumn","REFERENCED_COLUMN_NAME","writeFileSync"],"mappings":"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","file":"index.js","sourcesContent":["const { Model } = require('objection');\r\nconst Knex = require('knex');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst Mustache = require('mustache');\r\nconst pluralize = require('pluralize');\r\n\r\nmodule.exports = async (dbName, dbConnection, knexInstance, outputModelFile) => {\r\n  const DB = dbName;\r\n  // Initialize knex.\r\n  const knex = Knex({\r\n    client: 'mysql',\r\n    connection: { ...dbConnection, database: 'information_schema' }\r\n  });\r\n\r\n  knex.on('query', data => {\r\n    console.log('======== on query ==========');\r\n    let i = 0;\r\n    let sql = data.sql.replace(/\\?/g, k => {\r\n      return '\"' + data.bindings[i++] + '\"';\r\n    });\r\n    console.log(sql);\r\n  });\r\n  Model.knex(knex);\r\n\r\n  class KeyColumnUsage extends Model {\r\n    static get tableName() {\r\n      return 'KEY_COLUMN_USAGE';\r\n    }\r\n  }\r\n\r\n  class ColumnModel extends Model {\r\n    static get tableName() {\r\n      return 'COLUMNS';\r\n    }\r\n    static get relationMappings() {\r\n      return {\r\n        constrain: {\r\n          relation: Model.BelongsToOneRelation,\r\n          modelClass: KeyColumnUsage,\r\n          filter: query => query.where('TABLE_SCHEMA', DB).whereNotNull('REFERENCED_COLUMN_NAME'),\r\n          join: {\r\n            from: ['COLUMNS.COLUMN_NAME', 'COLUMNS.TABLE_NAME'],\r\n            to: ['KEY_COLUMN_USAGE.COLUMN_NAME', 'KEY_COLUMN_USAGE.TABLE_NAME']\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  class ViewModel extends Model {\r\n    static get tableName() {\r\n      return 'VIEWS';\r\n    }\r\n    static get relationMappings() {\r\n      return {\r\n        columns: {\r\n          relation: Model.HasManyRelation,\r\n          modelClass: ColumnModel,\r\n          filter: query => query.where('TABLE_SCHEMA', DB),\r\n          join: {\r\n            from: 'VIEWS.TABLE_NAME',\r\n            to: 'COLUMNS.TABLE_NAME'\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  const dataTypes = (type) => {\r\n    /* \r\n     * Possible types in database\r\n     * ================\r\n     * varchar    bigint    longtext\r\n     * datetime    int    tinyint\r\n     * decimal    double    tinytext\r\n     * text    timestamp    date\r\n     * mediumtext    float    smallint\r\n     * char    enum    blob\r\n     * longblob    set \r\n     * \r\n     * Types available in json schema\r\n     * string    number    object\r\n     * array    boolean    null\r\n     * integer    any\r\n     * \r\n     */\r\n    switch (type) {\r\n      case 'varchar':\r\n      case 'longtext':\r\n      case 'tinytext':\r\n      case 'text':\r\n      case 'mediumtext':\r\n      case 'char':\r\n        return 'string';\r\n      case 'date':\r\n        return 'date';\r\n      case 'datetime':\r\n        return 'date-time';\r\n      case 'bigint':\r\n      case 'int':\r\n      case 'tinyint':\r\n      case 'smallint':\r\n      case 'timestamp':\r\n        return 'integer';\r\n      case 'decimal':\r\n      case 'double':\r\n      case 'float':\r\n        return 'number';\r\n      default:\r\n        return 'any';\r\n    }\r\n  };\r\n\r\n  const searchFilter = (word) => {\r\n    switch (word) {\r\n      case 'old_password':\r\n      case 'password':\r\n      case 'token':\r\n        return false\r\n      default:\r\n        return true;\r\n    }\r\n  };\r\n\r\n  const singularize = (word) => {\r\n    let words = word.toLowerCase().split(/[_\\- ]/);\r\n    return words.map(w => pluralize.singular(w)).join('-');\r\n  };\r\n  const capitalize = (word) => word.charAt(0).toUpperCase() + word.slice(1);\r\n  const camelCase = (word) => word.toLowerCase()\r\n    .replace(/[-_]([a-z0-9])/g, g => g[1].toUpperCase());\r\n\r\n  let templateModelHeader = fs.readFileSync(path.join(__dirname, 'templates/modelHeaderTemplate.mustache'), 'UTF-8');\r\n  let templateModel = fs.readFileSync(path.join(__dirname, 'templates/modelTemplate.mustache'), 'UTF-8');\r\n\r\n  let models = Mustache.render(templateModelHeader, {\r\n    dbFile: knexInstance\r\n  });\r\n\r\n  let views = await ViewModel.query().where('table_schema', '=', DB).eager('[columns.[constrain]]');\r\n  let classModelNames = {\r\n    classes: []\r\n  };\r\n  views.forEach(view => {\r\n    let modelName = singularize(view.TABLE_NAME);\r\n    modelName = camelCase(modelName);\r\n    modelName = capitalize(modelName);\r\n    let constrains = [];\r\n    let requireds = [];\r\n    let searches = [];\r\n    let data = {\r\n      modelName: modelName + 'Model',\r\n      tableName: view.TABLE_NAME,\r\n      properties: view.columns.map(column => {\r\n        if (column.constrain) {\r\n          constrains.push(column.constrain);\r\n        }\r\n        if (column.IS_NULLABLE === 'NO' && !column.COLUMN_DEFAULT && column.COLUMN_NAME !== 'id') {\r\n          requireds.push(column.COLUMN_NAME);\r\n        }\r\n        let type = dataTypes(column.DATA_TYPE);\r\n        if (type === 'string' && searchFilter(column.COLUMN_NAME)) {\r\n          searches.push(column.COLUMN_NAME);\r\n        }\r\n        return {\r\n          name: column.COLUMN_NAME,\r\n          type: type\r\n        }\r\n      }),\r\n      requireds,\r\n      searches,\r\n      relations: constrains.map(column => {\r\n        let targetTableName = singularize(column.REFERENCED_TABLE_NAME);\r\n        targetTableName = camelCase(targetTableName);\r\n        return {\r\n          name: targetTableName,\r\n          column: column.COLUMN_NAME,\r\n          targetModel: capitalize(targetTableName) + 'Model',\r\n          targetTableName: column.REFERENCED_TABLE_NAME,\r\n          targetColumn: column.REFERENCED_COLUMN_NAME\r\n        }\r\n      })\r\n    }\r\n    classModelNames.classes.push(data);\r\n  });\r\n  models += Mustache.render(templateModel, classModelNames);\r\n  fs.writeFileSync(outputModelFile, models);\r\n  return true;\r\n}"]}