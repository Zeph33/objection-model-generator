{"version":3,"sources":["../src/ObjectionModelGenerator.js"],"names":["dataTypes","type","searchFilter","word","singularize","words","toLowerCase","split","map","pluralize","singular","w","join","capitalize","charAt","toUpperCase","slice","camelCase","replace","g","ObjectionModelGenerator","credentials","dbName","dbKnexObjectPath","dbFile","knex","client","connection","database","on","console","log","i","sql","data","bindings","Model","templateModelHeader","fs","readFile","templateModel","models","Mustache","render","TableModel","cns","KeyColumnUsage","query","whereNotNull","andWhere","tables","where","eager","classModelNames","classes","forEach","table","modelName","TABLE_NAME","constrains","requireds","searches","tableName","properties","columns","push","filter","cn","column","COLUMN_NAME","IS_NULLABLE","COLUMN_DEFAULT","DATA_TYPE","name","relations","targetTableName","REFERENCED_TABLE_NAME","targetModel","targetColumn","REFERENCED_COLUMN_NAME","version"],"mappings":"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","file":"ObjectionModelGenerator.js","sourcesContent":["import fs from 'fs-extra';\nimport pluralize from 'pluralize';\nimport Mustache from 'mustache';\nimport Knex from 'knex';\nimport {\n  Model\n} from 'objection';\n\nimport { version } from \"../package.json\";\nimport {\n  KeyColumnUsage,\n  TableModel\n} from './models';\nimport { constants } from 'zlib';\n\nconst dataTypes = (type) => {\n  /* \n   * Possible types in database\n   * ================\n   * varchar    bigint    longtext\n   * datetime    int    tinyint\n   * decimal    double    tinytext\n   * text    timestamp    date\n   * mediumtext    float    smallint\n   * char    enum    blob\n   * longblob    set \n   * \n   * Types available in json schema\n   * string    number    object\n   * array    boolean    null\n   * integer    any\n   * \n   */\n  switch (type) {\n    case 'varchar':\n    case 'longtext':\n    case 'tinytext':\n    case 'text':\n    case 'mediumtext':\n    case 'char':\n      return 'string';\n    case 'date':\n      return 'date';\n    case 'datetime':\n      return 'date-time';\n    case 'bigint':\n    case 'int':\n    case 'tinyint':\n    case 'smallint':\n    case 'timestamp':\n      return 'integer';\n    case 'decimal':\n    case 'double':\n    case 'float':\n      return 'number';\n    default:\n      return 'any';\n  }\n};\n\nconst searchFilter = (word) => {\n  switch (word) {\n    case 'old_password':\n    case 'password':\n    case 'token':\n      return false\n    default:\n      return true;\n  }\n};\n\nconst singularize = (word) => {\n  let words = word.toLowerCase().split(/[_\\- ]/);\n  return words.map(w => pluralize.singular(w)).join('-');\n};\n\nconst capitalize = (word) => word.charAt(0).toUpperCase() + word.slice(1);\n\nconst camelCase = (word) => word.toLowerCase()\n  .replace(/[-_]([a-z0-9])/g, g => g[1].toUpperCase());\n\nexport default class ObjectionModelGenerator {\n\n  /**\n   * \n   * @param {*} credentials \n   * @param {*} credentials.user\n   * @param {*} credentials.password\n   * @param {*} credentials.host\n   * @param {*} credentials.port\n   * @param {*} dbName \n   * @param {*} dbKnexObjectPath \n   * @param {*} outputFilePath \n   */\n  constructor(credentials = {}, dbName, dbKnexObjectPath) {\n    this.dbName = dbName;\n    this.dbFile = dbKnexObjectPath;\n\n    // Initialize knex.\n    const knex = Knex({\n      client: 'mysql',\n      connection: {\n        ...credentials,\n        database: 'information_schema'\n      }\n    });\n\n    knex.on('query', data => {\n      console.log('======== on query ==========');\n      let i = 0;\n      let sql = data.sql.replace(/\\?/g, k => {\n        return '\"' + data.bindings[i++] + '\"';\n      });\n      console.log(sql);\n    });\n    Model.knex(knex);\n  }\n\n  async createFiles() {\n    let {\n      dbName,\n      dbFile\n    } = this;\n\n    let templateModelHeader = await fs.readFile('templates/modelHeaderTemplate.mustache', 'UTF-8');\n    let templateModel = await fs.readFile('templates/modelTemplate.mustache', 'UTF-8');\n\n    let models = Mustache.render(templateModelHeader, {\n      dbFile\n    });\n    TableModel.dbName = dbName;\n    let cns = await KeyColumnUsage.query()\n      .whereNotNull('REFERENCED_COLUMN_NAME')\n      .andWhere('table_schema', '=', dbName);\n    let tables = await TableModel.query()\n      .where('table_schema', '=', dbName)\n      .eager('[columns]');\n    let classModelNames = {\n      classes: [],\n      dbFile\n    };\n    tables.forEach(async table => {\n      let modelName = singularize(table.TABLE_NAME);\n      modelName = camelCase(modelName);\n      modelName = capitalize(modelName);\n      let constrains = [];\n      let requireds = [];\n      let searches = [];\n      let data = {\n        modelName: modelName + 'Model',\n        tableName: table.TABLE_NAME,\n        properties: table.columns.map(column => {\n          constrains.push(...cns.filter(cn =>\n            table.TABLE_NAME === cn.TABLE_NAME\n            && column.COLUMN_NAME === cn.COLUMN_NAME));\n          if (column.IS_NULLABLE === 'NO' && !column.COLUMN_DEFAULT && column.COLUMN_NAME !== 'id') {\n            requireds.push(column.COLUMN_NAME);\n          }\n          let type = dataTypes(column.DATA_TYPE);\n          if (type === 'string' && searchFilter(column.COLUMN_NAME)) {\n            searches.push(column.COLUMN_NAME);\n          }\n          return {\n            name: column.COLUMN_NAME,\n            type: type\n          }\n        }),\n        requireds,\n        searches,\n        relations: constrains.map(column => {\n          let targetTableName = singularize(column.REFERENCED_TABLE_NAME);\n          targetTableName = camelCase(targetTableName);\n\n          return {\n            name: targetTableName,\n            column: column.COLUMN_NAME,\n            targetModel: capitalize(targetTableName) + 'Model',\n            targetTableName: column.REFERENCED_TABLE_NAME,\n            targetColumn: column.REFERENCED_COLUMN_NAME\n          }\n        })\n      }\n      classModelNames.classes.push(data);\n    });\n    models += Mustache.render(templateModel, classModelNames);\n    return models;\n  };\n\n  get version() {\n    return version;\n  }\n}\n"]}