{"version":3,"sources":["../../src/dbToControllers/index.js"],"names":["require","Model","Knex","fs","path","Mustache","pluralize","module","exports","dbName","dbConnection","modelsPath","controllerParent","pathControllers","DB","knex","client","connection","database","check","raw","catch","error","e","console","log","on","i","sql","data","replace","bindings","KeyColumnUsage","ColumnModel","constrain","relation","BelongsToOneRelation","modelClass","filter","query","where","whereNotNull","join","from","to","TableModel","columns","HasManyRelation","singularize","word","words","toLowerCase","split","map","singular","w","capitalize","charAt","toUpperCase","slice","camelCase","g","pathHeader","__dirname","templateControllerHeader","readFileSync","pathControllerTpl","templateController","headerController","render","tables","eager","forEach","modelName","table","TABLE_NAME","rels","col","targetTableName","REFERENCED_TABLE_NAME","controller","model","writeFileSync"],"mappings":"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","file":"index.js","sourcesContent":["const { Model } = require('objection');\r\nconst Knex = require('knex');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst Mustache = require('mustache');\r\nconst pluralize = require('pluralize');\r\n\r\nmodule.exports = async (dbName, dbConnection, modelsPath, controllerParent, pathControllers) => {\r\n  const DB = dbName;\r\n  // Initialize knex.\r\n  const knex = Knex({\r\n    client: 'mysql',\r\n    connection: { ...dbConnection, database: 'information_schema' }\r\n  });\r\n\r\n  var check = await knex.raw('select 1+1 as result').catch(e=>({error: e}));\r\n  if(check.error) {\r\n    console.log(check.error);\r\n    return false;\r\n  }\r\n\r\n  knex.on('query', data => {\r\n    console.log('======== on query ==========');\r\n    let i = 0;\r\n    let sql = data.sql.replace(/\\?/g, k => {\r\n      return '\"' + data.bindings[i++] + '\"';\r\n    });\r\n    console.log(sql);\r\n  });\r\n  Model.knex(knex);\r\n\r\n  class KeyColumnUsage extends Model {\r\n    static get tableName() {\r\n      return 'KEY_COLUMN_USAGE';\r\n    }\r\n  }\r\n\r\n  class ColumnModel extends Model {\r\n    static get tableName() {\r\n      return 'COLUMNS';\r\n    }\r\n    static get relationMappings() {\r\n      return {\r\n        constrain: {\r\n          relation: Model.BelongsToOneRelation,\r\n          modelClass: KeyColumnUsage,\r\n          filter: query => query.where('TABLE_SCHEMA', DB).whereNotNull('REFERENCED_COLUMN_NAME'),\r\n          join: {\r\n            from: ['COLUMNS.COLUMN_NAME', 'COLUMNS.TABLE_NAME'],\r\n            to: ['KEY_COLUMN_USAGE.COLUMN_NAME', 'KEY_COLUMN_USAGE.TABLE_NAME']\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  class TableModel extends Model {\r\n    static get tableName() {\r\n      return 'TABLES';\r\n    }\r\n    static get relationMappings() {\r\n      return {\r\n        columns: {\r\n          relation: Model.HasManyRelation,\r\n          modelClass: ColumnModel,\r\n          filter: query => query.where('TABLE_SCHEMA', DB),\r\n          join: {\r\n            from: 'TABLES.TABLE_NAME',\r\n            to: 'COLUMNS.TABLE_NAME'\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  const singularize = (word) => {\r\n    let words = word.toLowerCase().split(/[_\\- ]/);\r\n    return words.map(w => pluralize.singular(w)).join('-');\r\n  };\r\n  const capitalize = (word) => word.charAt(0).toUpperCase() + word.slice(1);\r\n  const camelCase = (word) => word.toLowerCase()\r\n    .replace(/[-_]([a-z0-9])/g, g => g[1].toUpperCase());\r\n\r\n  let pathHeader = path.join(__dirname, 'templates/controllerHeaderTemplate.mustache');\r\n  let templateControllerHeader = fs.readFileSync(pathHeader, 'UTF-8');\r\n  let pathControllerTpl = path.join(__dirname, 'templates/controllerTemplate.mustache');\r\n  let templateController = fs.readFileSync(pathControllerTpl, 'UTF-8');\r\n  let headerController = Mustache.render(templateControllerHeader, {\r\n    controllerParent,\r\n    modelsPath\r\n  });\r\n  let tables = await TableModel.query().where('table_schema', '=', DB).eager('[columns.[constrain]]');\r\n  tables.forEach(table => {\r\n    let modelName = singularize(table.TABLE_NAME);\r\n    modelName = camelCase(modelName);\r\n    modelName = capitalize(modelName);\r\n\r\n    let rels = table.columns.filter(col => !!col.constrain).map(col => {\r\n      let targetTableName = singularize(col.constrain.REFERENCED_TABLE_NAME);\r\n      targetTableName = camelCase(targetTableName);\r\n      return targetTableName;\r\n    }).join(', ');\r\n\r\n    let controller = headerController;\r\n    controller += Mustache.render(templateController, {\r\n      model: modelName + 'Model',\r\n      controller: modelName + 'Controller',\r\n      rels,\r\n    });\r\n    fs.writeFileSync(`${pathControllers}/${modelName}Controller.js`, controller);\r\n  });\r\n}\r\n"]}