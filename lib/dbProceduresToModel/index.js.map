{"version":3,"sources":["../../src/dbProceduresToModel/index.js"],"names":["require","config","Model","Knex","fs","path","Mustache","pluralize","module","exports","dbName","dbConnection","knexInstance","outputModelFile","DB","knex","client","connection","database","on","console","log","i","sql","data","replace","bindings","RoutinesModel","dataTypes","type","searchFilter","word","singularize","words","toLowerCase","split","map","singular","w","join","capitalize","charAt","toUpperCase","slice","camelCase","g","templateModelHeader","readFileSync","__dirname","templateModel","models","render","dbFile","routines","query","where","andWhere","classModelNames","classes","forEach","modelName","routine","ROUTINE_NAME","requireds","searches","tableName","push","writeFileSync"],"mappings":"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","file":"index.js","sourcesContent":["require('dotenv').config();\r\n\r\nconst { Model } = require('objection');\r\n\r\nconst Knex = require('knex');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst Mustache = require('mustache');\r\nconst pluralize = require('pluralize');\r\n\r\nmodule.exports = async (dbName, dbConnection, knexInstance, outputModelFile) => {\r\n  const DB = dbName;\r\n  // Initialize knex.\r\n  const knex = Knex({\r\n    client: 'mysql',\r\n    connection: { ...dbConnection, database: 'information_schema' }\r\n  });\r\n\r\n  knex.on('query', data => {\r\n    console.log('======== on query ==========');\r\n    let i = 0;\r\n    let sql = data.sql.replace(/\\?/g, k => {\r\n      return '\"' + data.bindings[i++] + '\"';\r\n    });\r\n    console.log(sql);\r\n  });\r\n  Model.knex(knex);\r\n\r\n  class RoutinesModel extends Model {\r\n    static get tableName() {\r\n      return 'routines';\r\n    }\r\n  }\r\n\r\n  const dataTypes = (type) => {\r\n    /* \r\n     * Possible types in database\r\n     * ================\r\n     * varchar    bigint    longtext\r\n     * datetime    int    tinyint\r\n     * decimal    double    tinytext\r\n     * text    timestamp    date\r\n     * mediumtext    float    smallint\r\n     * char    enum    blob\r\n     * longblob    set \r\n     * \r\n     * Types available in json schema\r\n     * string    number    object\r\n     * array    boolean    null\r\n     * integer    any\r\n     * \r\n     */\r\n    switch (type) {\r\n      case 'varchar':\r\n      case 'longtext':\r\n      case 'tinytext':\r\n      case 'text':\r\n      case 'mediumtext':\r\n      case 'char':\r\n        return 'string';\r\n      case 'date':\r\n        return 'date';\r\n      case 'datetime':\r\n        return 'date-time';\r\n      case 'bigint':\r\n      case 'int':\r\n      case 'tinyint':\r\n      case 'smallint':\r\n      case 'timestamp':\r\n        return 'integer';\r\n      case 'decimal':\r\n      case 'double':\r\n      case 'float':\r\n        return 'number';\r\n      default:\r\n        return 'any';\r\n    }\r\n  };\r\n\r\n  const searchFilter = (word) => {\r\n    switch (word) {\r\n      case 'old_password':\r\n      case 'password':\r\n      case 'token':\r\n        return false\r\n      default:\r\n        return true;\r\n    }\r\n  };\r\n\r\n  const singularize = (word) => {\r\n    let words = word.toLowerCase().split(/[_\\- ]/);\r\n    return words.map(w => pluralize.singular(w)).join('-');\r\n  };\r\n  const capitalize = (word) => word.charAt(0).toUpperCase() + word.slice(1);\r\n  const camelCase = (word) => word.toLowerCase()\r\n    .replace(/[-_]([a-z0-9])/g, g => g[1].toUpperCase());\r\n\r\n  let templateModelHeader = fs.readFileSync(path.join(__dirname, 'templates/modelHeaderTemplate.mustache'), 'UTF-8');\r\n  let templateModel = fs.readFileSync(path.join(__dirname, 'templates/modelTemplate.mustache'), 'UTF-8');\r\n\r\n  let models = Mustache.render(templateModelHeader, {\r\n    dbFile: knexInstance\r\n  });\r\n\r\n  let routines = await RoutinesModel.query().where('routine_schema', '=', DB).andWhere('routine_type', '=', 'PROCEDURE');\r\n  let classModelNames = {\r\n    classes: []\r\n  };\r\n  routines.forEach(routine => {\r\n    let modelName = singularize(routine.ROUTINE_NAME);\r\n    modelName = camelCase(modelName);\r\n    modelName = capitalize(modelName);\r\n    let requireds = [];\r\n    let searches = [];\r\n    let data = {\r\n      modelName: modelName + 'Model',\r\n      tableName: routine.ROUTINE_NAME,\r\n      requireds,\r\n      searches\r\n    }\r\n    classModelNames.classes.push(data);\r\n  });\r\n  models += Mustache.render(templateModel, classModelNames);\r\n  fs.writeFileSync(outputModelFile, models);\r\n}"]}