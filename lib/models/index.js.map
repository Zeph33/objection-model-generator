{"version":3,"sources":["../../src/models/index.js"],"names":["dbName","KeyColumnUsage","Model","ColumnModel","constrain","relation","BelongsToOneRelation","modelClass","filter","query","where","whereNotNull","join","from","to","TableModel","columns","HasManyRelation","name"],"mappings":";;;;;;;;;AAAA;;;;;;;;AAIA,IAAIA,eAAJ;;IAEaC,c,WAAAA,c;;;;;;;;;;;wBACY;AACrB,aAAO,kBAAP;AACD;;;;EAHiCC,gB;;IAMvBC,W,WAAAA,W;;;;;;;;;;;wBACY;AACrB,aAAO,SAAP;AACD;;;wBAC6B;AAC5B,aAAO;AACLC,mBAAW;AACTC,oBAAUH,iBAAMI,oBADP;AAETC,sBAAYN,cAFH;AAGTO,kBAAQ;AAAA,mBAASC,MAAMC,KAAN,CAAY,cAAZ,EAA4BV,MAA5B,EAAoCW,YAApC,CAAiD,wBAAjD,CAAT;AAAA,WAHC;AAITC,gBAAM;AACJC,kBAAM,CAAC,qBAAD,EAAwB,oBAAxB,CADF;AAEJC,gBAAI,CAAC,8BAAD,EAAiC,6BAAjC;AAFA;AAJG;AADN,OAAP;AAWD;;;;EAhB8BZ,gB;;IAmBpBa,U,WAAAA,U;;;;;;;;;;;wBACY;AACrB,aAAO,QAAP;AACD;;;wBAC6B;AAC5B,aAAO;AACLC,iBAAS;AACPX,oBAAUH,iBAAMe,eADT;AAEPV,sBAAYJ,WAFL;AAGPK,kBAAQ;AAAA,mBAASC,MAAMC,KAAN,CAAY,cAAZ,EAA4BV,MAA5B,CAAT;AAAA,WAHD;AAIPY,gBAAM;AACJC,kBAAM,mBADF;AAEJC,gBAAI;AAFA;AAJC;AADJ,OAAP;AAWD;;;sBACiBI,I,EAAM;AACtBlB,eAASkB,IAAT;AACD;;;;EAnB6BhB,gB","file":"index.js","sourcesContent":["import {\n  Model\n} from 'objection';\n\nlet dbName;\n\nexport class KeyColumnUsage extends Model {\n  static get tableName() {\n    return 'KEY_COLUMN_USAGE';\n  }\n}\n\nexport class ColumnModel extends Model {\n  static get tableName() {\n    return 'COLUMNS';\n  }\n  static get relationMappings() {\n    return {\n      constrain: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: KeyColumnUsage,\n        filter: query => query.where('TABLE_SCHEMA', dbName).whereNotNull('REFERENCED_COLUMN_NAME'),\n        join: {\n          from: ['COLUMNS.COLUMN_NAME', 'COLUMNS.TABLE_NAME'],\n          to: ['KEY_COLUMN_USAGE.COLUMN_NAME', 'KEY_COLUMN_USAGE.TABLE_NAME']\n        }\n      }\n    };\n  }\n}\n\nexport class TableModel extends Model {\n  static get tableName() {\n    return 'TABLES';\n  }\n  static get relationMappings() {\n    return {\n      columns: {\n        relation: Model.HasManyRelation,\n        modelClass: ColumnModel,\n        filter: query => query.where('TABLE_SCHEMA', dbName),\n        join: {\n          from: 'TABLES.TABLE_NAME',\n          to: 'COLUMNS.TABLE_NAME'\n        }\n      }\n    };\n  }\n  static set dbName(name) {\n    dbName = name;\n  }\n}"]}